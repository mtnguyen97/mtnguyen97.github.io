{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["init","Date","now","PomodoroPhase","ord","remainingInMs","this","BreakPhase","LongBreakPhase","App","useState","count","setCount","useEffect","window","requestAnimationFrame","phase","firstPomodoro","pastTime","pomodoro","brk","gap","i","calc","className","src","logo","alt","hidden","String","Math","floor","padStart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,MAA0B,iC,eCInCA,EAAOC,KAAKC,M,IAuCZC,EACF,WAAYC,EAAaC,GAAwB,yBAKjDD,SALgD,OAMhDC,mBANgD,EAC5CC,KAAKF,IAAMA,EACXE,KAAKD,cAAgBA,GAOvBE,EACF,WAAYH,EAAaC,GAAwB,yBAKjDD,SALgD,OAMhDC,mBANgD,EAC5CC,KAAKF,IAAMA,EACXE,KAAKD,cAAgBA,GAOvBG,EAEF,aAAe,yBAKfJ,SALc,OAMdC,mBANc,EACVC,KAAKF,IAAM,EACXE,KAAKD,cAAgB,GAwDdI,MAnHf,WACI,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACNC,OAAOC,uBAAsB,kBAAMH,EAASX,KAAKC,aAGrD,IACIc,EA2DR,SAAcC,EAAuBC,GAIjC,IAHA,IAAIC,EAAW,EACXC,EAAM,EACNC,EAAM,EACDC,EAAI,GAAKA,IAAK,CACnB,OAAQA,GACJ,KAAK,EACDH,EAAWF,EACXG,EAAsB,IAAhBH,EACN,MACJ,KAAK,EACDE,EAA2B,KAAhBF,EACXG,EAAsB,IAAhBH,EACN,MACJ,KAAK,EACDE,EAA2B,KAAhBF,EACXG,EAAsB,GAAhBH,EACN,MACJ,KAAK,EACDE,EAA2B,EAAhBF,EACXG,EAAsB,GAAhBH,EACN,MACJ,KAAK,EACDE,EAA2B,KAAhBF,EACXG,EAAsB,IAAhBH,EACN,MACJ,KAAK,EACDE,EAA2B,KAAhBF,EACXG,EAAsB,IAAhBH,EACN,MACJ,KAAK,EACDE,EAAWF,EACXG,EAAM,EACN,MACJ,QACI,OAAO,IAAIZ,EAEnB,GAAIU,EAAWG,GAAOF,EAClB,OAAO,IAAIhB,EAAcmB,EAAID,EAAMF,EAAYD,GAGnD,GAAIA,GADJG,GAAOF,IACeC,EAClB,OAAO,IAAIb,EAAWe,EAAID,EAAMD,EAAOF,GAE3CG,GAAOD,GAvGCG,CAVK,KASFZ,EAAQX,GAGvB,OACI,qBAAKwB,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,8BACI,+BACIX,aAAiBb,EAAgB,WAAaa,aAAiBT,EAAa,QAAU,eAClF,uBAAMqB,OAAQZ,aAAiBR,EAA/B,cAAiDQ,EAAMZ,IAAM,QAEzE,oBAAGwB,OAAQZ,aAAiBR,EAA5B,UACI,+BAAOqB,OAAOC,KAAKC,MAAMf,EAAMX,cAAgB,IAAO,KAAK2B,SAAS,EAAG,OAD3E,IAGI,+BAAOH,OAAOC,KAAKC,MAAOf,EAAMX,cAAgB,IAAQ,KAAK2B,SAAS,EAAG,gBChB9EC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.372f2b03.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst init = Date.now();\n\nconst initPomodoro = 20 * 60 * 1000;\n\nfunction App() {\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        window.requestAnimationFrame(() => setCount(Date.now()));\n    })\n\n    let pastTime = count - init;\n    let phase = calc(initPomodoro, pastTime);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    <span>{\n                        phase instanceof PomodoroPhase ? 'POMODORO' : phase instanceof BreakPhase ? 'BREAK' : 'LONG BREAK'\n                    }</span><span hidden={phase instanceof LongBreakPhase}> {phase.ord + 1}</span>\n                </p>\n                <p hidden={phase instanceof LongBreakPhase}>\n                    <span>{String(Math.floor(phase.remainingInMs / 1000 / 60)).padStart(2, '0')}</span>\n                    :\n                    <span>{String(Math.floor((phase.remainingInMs / 1000) % 60)).padStart(2, '0')}</span>\n                </p>\n            </header>\n        </div>\n    );\n}\n\ninterface Phase {\n    ord: number;\n    remainingInMs: number;\n\n}\n\nclass PomodoroPhase implements Phase {\n    constructor(ord: number, remainingInMs: number) {\n        this.ord = ord;\n        this.remainingInMs = remainingInMs;\n    }\n\n    ord: number;\n    remainingInMs: number;\n}\n\nclass BreakPhase implements Phase {\n    constructor(ord: number, remainingInMs: number) {\n        this.ord = ord;\n        this.remainingInMs = remainingInMs;\n    }\n\n    ord: number;\n    remainingInMs: number;\n}\n\nclass LongBreakPhase implements Phase {\n\n    constructor() {\n        this.ord = 0;\n        this.remainingInMs = 0;\n    }\n\n    ord: number;\n    remainingInMs: number;\n\n}\n\nfunction calc(firstPomodoro: number, pastTime: number): Phase {\n    let pomodoro = 0;\n    let brk = 0;\n    let gap = 0;\n    for (let i = 0; ; i++) {\n        switch (i) {\n            case 0:\n                pomodoro = firstPomodoro;\n                brk = firstPomodoro * 0.25;\n                break;\n            case 1:\n                pomodoro = firstPomodoro * 1.25;\n                brk = firstPomodoro * 0.25;\n                break;\n            case 2:\n                pomodoro = firstPomodoro * 1.75;\n                brk = firstPomodoro * 0.5;\n                break;\n            case 3:\n                pomodoro = firstPomodoro * 2;\n                brk = firstPomodoro * 0.5;\n                break;\n            case 4:\n                pomodoro = firstPomodoro * 1.75;\n                brk = firstPomodoro * 0.25;\n                break;\n            case 5:\n                pomodoro = firstPomodoro * 1.25;\n                brk = firstPomodoro * 0.25;\n                break;\n            case 6:\n                pomodoro = firstPomodoro;\n                brk = 0;\n                break;\n            default:\n                return new LongBreakPhase();\n        }\n        if (pastTime - gap <= pomodoro) {\n            return new PomodoroPhase(i, (gap + pomodoro) - pastTime);\n        }\n        gap += pomodoro;\n        if (pastTime - gap <= brk) {\n            return new BreakPhase(i, (gap + brk) - pastTime);\n        }\n        gap += brk;\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}